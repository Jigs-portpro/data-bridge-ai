// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A data enrichment AI agent.
 *
 * - dataEnrichment - A function that handles the data enrichment process.
 * - DataEnrichmentInput - The input type for the dataEnrichment function.
 * - DataEnrichmentOutput - The return type for the dataEnrichment function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DataEnrichmentInputSchema = z.object({
  data: z
    .string()
    .describe(
      'The data to enrich, expected to be in CSV format. The first row should be the column headers.'
    ),
  enrichmentInstructions: z
    .string()
    .describe(
      'Instructions on how to enrich the data. Be as specific as possible, referencing column headers when possible.'
    ),
});
export type DataEnrichmentInput = z.infer<typeof DataEnrichmentInputSchema>;

const DataEnrichmentOutputSchema = z.object({
  enrichedData: z
    .string()
    .describe(
      'The enriched data, in CSV format. The first row should be the column headers.'
    ),
});
export type DataEnrichmentOutput = z.infer<typeof DataEnrichmentOutputSchema>;

export async function dataEnrichment(input: DataEnrichmentInput): Promise<DataEnrichmentOutput> {
  return dataEnrichmentFlow(input);
}

const prompt = ai.definePrompt({
  name: 'dataEnrichmentPrompt',
  input: {schema: DataEnrichmentInputSchema},
  output: {schema: DataEnrichmentOutputSchema},
  prompt: `You are an AI data enrichment tool. You will take in data, and enrich it according to the instructions provided.

Data:
{{data}}

Instructions:
{{enrichmentInstructions}}

Output the enriched data in CSV format, including the column headers in the first row. Do not include any explanation, only the data. The column headers should remain the same unless otherwise specified in the enrichment instructions.
`,
});

const dataEnrichmentFlow = ai.defineFlow(
  {
    name: 'dataEnrichmentFlow',
    inputSchema: DataEnrichmentInputSchema,
    outputSchema: DataEnrichmentOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
