
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A data enrichment AI agent.
 *
 * - dataEnrichment - A function that handles the data enrichment process.
 * - DataEnrichmentClientInput - The client-facing input type for the dataEnrichment function.
 * - DataEnrichmentOutput - The return type for the dataEnrichment function.
 */

import {ai} from '@/ai/genkit';
import {z, type GenkitModel} from 'genkit';
import {
  gpt4o, gpt4oMini, gpt4Turbo, gpt4, gpt35Turbo,
} from 'genkitx-openai';
// Assuming genkitx-anthropic handles string model IDs for now.

// Schema for the data required by the AI prompt
const DataEnrichmentPromptInputSchema = z.object({
  data: z
    .string()
    .describe(
      'The data to enrich, expected to be in CSV format. The first row should be the column headers.'
    ),
  enrichmentInstructions: z
    .string()
    .describe(
      'Instructions on how to enrich the data. Be as specific as possible, referencing column headers when possible.'
    ),
});

// Schema for the input received by the exported server action from the client
const DataEnrichmentClientInputSchema = DataEnrichmentPromptInputSchema.extend({
  aiProvider: z.string().describe("The AI provider ID (e.g., 'googleai', 'openai', 'anthropic')."),
  aiModelName: z.string().describe("The specific model name (e.g., 'gemini-1.5-flash', 'gpt4oMini', 'claude-3-haiku-20240307').")
});
export type DataEnrichmentClientInput = z.infer<typeof DataEnrichmentClientInputSchema>;


const DataEnrichmentOutputSchema = z.object({
  enrichedData: z
    .string()
    .describe(
      'The enriched data, in CSV format. The first row should be the column headers.'
    ),
});
export type DataEnrichmentOutput = z.infer<typeof DataEnrichmentOutputSchema>;

export async function dataEnrichment(input: DataEnrichmentClientInput): Promise<DataEnrichmentOutput> {
  return dataEnrichmentFlow(input);
}

const prompt = ai.definePrompt({
  name: 'dataEnrichmentPrompt',
  input: {schema: DataEnrichmentPromptInputSchema},
  output: {schema: DataEnrichmentOutputSchema},
  prompt: `You are an AI data enrichment tool. You will take in data, and enrich it according to the instructions provided.

Data:
{{data}}

Instructions:
{{enrichmentInstructions}}

Output the enriched data in CSV format, including the column headers in the first row. Do not include any explanation, only the data. The column headers should remain the same unless otherwise specified in the enrichment instructions.
`,
});

const dataEnrichmentFlow = ai.defineFlow(
  {
    name: 'dataEnrichmentFlow',
    inputSchema: DataEnrichmentClientInputSchema,
    outputSchema: DataEnrichmentOutputSchema,
  },
  async (clientInput) => {
    const { aiProvider, aiModelName, ...promptData } = clientInput;
    
    let modelToUse: GenkitModel | string;

    if (aiProvider === 'openai') {
      switch (aiModelName) {
        case 'gpt4o': modelToUse = gpt4o; break;
        case 'gpt4oMini': modelToUse = gpt4oMini; break;
        case 'gpt4Turbo': modelToUse = gpt4Turbo; break;
        case 'gpt4': modelToUse = gpt4; break;
        case 'gpt35Turbo': modelToUse = gpt35Turbo; break;
        default: throw new Error(`Unknown OpenAI model ID: ${aiModelName}`);
      }
    } else if (aiProvider === 'anthropic') {
      modelToUse = aiModelName; // Assumes genkitx-anthropic handles string model IDs
    } else if (aiProvider === 'googleai') {
      modelToUse = `googleai/${aiModelName}`;
    } else {
      throw new Error(`Unsupported AI provider: ${aiProvider}`);
    }
    
    const {output} = await prompt(promptData, { model: modelToUse });
    if (!output) {
      throw new Error("AI did not return an output for data enrichment.");
    }
    return output!;
  }
);
