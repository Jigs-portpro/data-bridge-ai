
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A flow that intelligently reorders columns in a dataset based on their content and titles.
 *
 * - intelligentColumnReordering - A function that reorders the columns of a dataset.
 * - IntelligentColumnReorderingClientInput - The input type for the intelligentColumnReordering function.
 * - IntelligentColumnReorderingOutput - The return type for the intelligentColumnReordering function.
 */

import {ai} from '@/ai/genkit';
import {z, type GenkitModel} from 'genkit';
import {
  gpt4o, gpt4oMini, gpt4Turbo, gpt4, gpt35Turbo,
} from 'genkitx-openai';
// Assuming genkitx-anthropic handles string model IDs for now.

// Schema for the data required by the AI prompt
const IntelligentColumnReorderingPromptInputSchema = z.object({
  columnNames: z
    .array(z.string())
    .describe('An array of column names in the dataset.'),
  sampleData: z
    .array(z.record(z.string()))
    .describe(
      'A sample of data from the dataset, represented as an array of objects where each object is a row and keys are column names.'
    ),
});

// Schema for the input received by the exported server action from the client
const IntelligentColumnReorderingClientInputSchema = IntelligentColumnReorderingPromptInputSchema.extend({
  aiProvider: z.string().describe("The AI provider ID (e.g., 'googleai', 'openai', 'anthropic')."),
  aiModelName: z.string().describe("The specific model name (e.g., 'gemini-1.5-flash', 'gpt4oMini', 'claude-3-haiku-20240307').")
});
export type IntelligentColumnReorderingClientInput = z.infer<typeof IntelligentColumnReorderingClientInputSchema>;


const IntelligentColumnReorderingOutputSchema = z.object({
  reorderedColumnNames: z
    .array(z.string())
    .describe('An array of column names in the intelligently reordered sequence.'),
  reasoning: z
    .string()
    .describe(
      'Explanation of why the columns were reordered in the manner returned in reorderedColumnNames.'
    ),
});
export type IntelligentColumnReorderingOutput = z.infer<
  typeof IntelligentColumnReorderingOutputSchema
>;

export async function intelligentColumnReordering(
  input: IntelligentColumnReorderingClientInput
): Promise<IntelligentColumnReorderingOutput> {
  return intelligentColumnReorderingFlow(input);
}

const prompt = ai.definePrompt({
  name: 'intelligentColumnReorderingPrompt',
  input: {schema: IntelligentColumnReorderingPromptInputSchema},
  output: {schema: IntelligentColumnReorderingOutputSchema},
  prompt: `You are an AI assistant that reorders columns in a dataset based on their content and titles to improve readability and analysis.

Given the following column names and sample data:

Column Names: {{columnNames}}
Sample Data: {{sampleData}}

Reorder the columns in a logical sequence. Explain the reasoning behind the reordering.

Return the reordered column names and the reasoning behind the reordering in the following JSON format:
{
  "reorderedColumnNames": ["column1", "column2", "column3"],
  "reasoning": "Explanation of why the columns were reordered in this sequence."
}

Ensure the output is a valid JSON.
`,
});

const intelligentColumnReorderingFlow = ai.defineFlow(
  {
    name: 'intelligentColumnReorderingFlow',
    inputSchema: IntelligentColumnReorderingClientInputSchema,
    outputSchema: IntelligentColumnReorderingOutputSchema,
  },
  async (clientInput) => {
    const { aiProvider, aiModelName, ...promptData } = clientInput;
    
    let modelToUse: GenkitModel | string;

    if (aiProvider === 'openai') {
      switch (aiModelName) {
        case 'gpt4o': modelToUse = gpt4o; break;
        case 'gpt4oMini': modelToUse = gpt4oMini; break;
        case 'gpt4Turbo': modelToUse = gpt4Turbo; break;
        case 'gpt4': modelToUse = gpt4; break;
        case 'gpt35Turbo': modelToUse = gpt35Turbo; break;
        default: throw new Error(`Unknown OpenAI model ID: ${aiModelName}`);
      }
    } else if (aiProvider === 'anthropic') {
      modelToUse = aiModelName; // Assumes genkitx-anthropic handles string model IDs
    } else if (aiProvider === 'googleai') {
      modelToUse = `googleai/${aiModelName}`;
    } else {
      throw new Error(`Unsupported AI provider: ${aiProvider}`);
    }
    
    const {output} = await prompt(promptData, { model: modelToUse });
    if (!output) {
      throw new Error("AI did not return an output for intelligent column reordering.");
    }
    return output;
  }
);
